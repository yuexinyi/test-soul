1..软件测试的生命周期：需求分析->测试计划->测试设计、测试开发->测试执行->测试评估
2.软件开发的生命周期：需求分析->计划->设计->编码->测试->运行维护
3.软件测试&软件开发生命周期
（1）需求阶段：了解需求，进行需求分析，得出测试需求
（2）计划阶段：根据需求编写测试计划、测试方案
（3）设计阶段：搭建测试用例框架，根据需求和设计编写部分测试用例
（4）编码阶段：完善、细化测试用例，调整测试计划和方案
（5）测试阶段：根据测试计划、测试用例执行测试，在执行过程中记录、管理缺陷，测试完成编写测试报告
（6）运行维护：可以参与用户使用软件的培训,收集问题并及时反馈
4.一个合格的bug包括：版本、环境、错误重现步骤、预期行为描述、错误行为描述、故障分类等
5.如果你在测试过程中发现一个Bug，但是开发不认为这是一个bug,你该怎么办？
（1）自审；是否是bug描述不够清楚，要让开发充分明白我所表述的bug
（2）用户角度：站在用户的角度考虑问题，如果你是用户，你可以接受这个bug吗
（3）bug定级要有理有据（需站在用户的角度考虑级别）
（4）提高自身技术和业务水平（提出问题+解决方法）
（5）多轮交流，开发拒不接受，发起BUG评审（1.如何处理BUG2.分析产生原因，预防对策）
6.测试用例的基本要素：测试环境+操作步骤+测试数据+预期结果等
7.测试用例的设计方法：
（1）等价类
定义：根据需求将输入划分为若干个等价类，从等价类中选一个测试用例执行，若通过，则它所代表的等价类都通过。
解决问题：穷举测试
有效等价类：根据需求说明书，合理有意义的输入数据集合；验证程序是否实现了需求规格说明书中的所规定的功能和性能
无效等价类：根据需求说明书，不满足需求的集合
栗子：超市买水果；
有效等价类：苹果、桃子、芒果
无效等价类：青菜、饮料、薯片
（2）边界值
定义：对输入或输出的边界值进行测试的一种黑盒测试方法，通常是等价类的补充
（3）因果图
定义：直观表明程序输入条件（原因）和输出动作（结果）之间的相互关系；适用于被测试程序具有多种输入条件、程序的输出又依赖于输入条件的各种情况
（4）正交排列
目的：减少用例数目。用尽量少的用例覆盖输入的两两组合
（5）场景设计法
想象各种业务流来设计测试用例（场景）
（6）错误推测法
经验+直觉，售后用户的反馈意见，故障管理库
